# -*- coding: utf-8 -*-
"""Copy of ULNN model training

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17WIOSE5z5J3FWUYMrQR0v2IzxT-NRAad
"""

import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from zipfile import ZipFile

data_path = '/content/Dataset.zip'

with ZipFile(data_path, 'r') as zip:
  zip.extractall()
  print('Done')

IMG_SIZE = 256
BATCH_SIZE = 32
DATASET_PATH = '/content/Dataset'

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_generator = datagen.flow_from_directory(
    DATASET_PATH,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training',
    shuffle = True
)

val_generator = datagen.flow_from_directory(
    DATASET_PATH,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation',
    shuffle = False
)

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(pool_size=(2,2)),

    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')
])

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

model.summary()

early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=20,
    validation_data=val_generator,
    validation_steps=len(val_generator),
    callbacks=[early_stop]
)

model.save("ULNN_model2.h5")

from google.colab import files
files.download('ULNN_model2.h5')

import os
import tensorflow as tf
import numpy as np
import cv2
from google.colab import files

model = tf.keras.models.load_model('/content/ULNN_model2.h5')

classes = ['A','B','C','D']

image_path = "/content/A975.jpg"

IMG_SIZE = 256
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
img = img / 255.0
img = np.expand_dims(img, axis=0)

predictions = model.predict(img)
print("Raw predictions scores:" , predictions)
print("Predicted class:" , classes[np.argmax(predictions)])

# Import necessary libraries
from sklearn.metrics import accuracy_score

# Sample true and predicted values
y_true = [0, 1, 1, 0, 1, 0]
y_pred = [0, 1, 0, 0, 1, 1]

# Calculate accuracy
accuracy = accuracy_score(y_true, y_pred)

# Print the result
print("Accuracy:", accuracy)

# Import libraries
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Sample true and predicted values
y_true = [0, 1, 2, 2, 0, 1]
y_pred = [0, 0, 2, 2, 0, 2]

# Compute confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Display the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()

# Show the plot
plt.show()

# Import necessary library
from sklearn.metrics import precision_score

# Sample true and predicted labels
y_true = [0, 1, 1, 0, 1, 1, 0]
y_pred = [0, 0, 1, 0, 1, 1, 1]

# Calculate precision
precision = precision_score(y_true, y_pred)

# Print the result
print("Precision:", precision)

# Import necessary library
from sklearn.metrics import recall_score

# Sample true and predicted labels
y_true = [0, 1, 1, 0, 1, 1, 0]
y_pred = [0, 0, 1, 0, 1, 1, 1]

# Calculate recall
recall = recall_score(y_true, y_pred)

# Print the result
print("Recall:", recall)

import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y = [2, 4, 1, 8, 7]

plt.plot(x, y, marker='o')
plt.title("Line Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Suppose this is your training history from a Keras model
history = {
    'accuracy': [0.6, 0.7, 0.8, 0.85, 0.88],
    'val_accuracy': [0.58, 0.65, 0.75, 0.80, 0.82],
    'loss': [0.9, 0.6, 0.4, 0.3, 0.25],
    'val_loss': [1.0, 0.7, 0.5, 0.4, 0.35]
}
epochs = range(1, len(history['accuracy']) + 1)

# Plot Accuracy
plt.plot(epochs, history['accuracy'], 'b-', label='Training Accuracy')
plt.plot(epochs, history['val_accuracy'], 'g--', label='Validation Accuracy')
plt.title('Training vs Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Plot Loss
plt.plot(epochs, history['loss'], 'b-', label='Training Loss')
plt.plot(epochs, history['val_loss'], 'g--', label='Validation Loss')
plt.title('Training vs Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()